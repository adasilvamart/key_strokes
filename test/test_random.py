import pytest
from src.key_strokes import key_strokes

@pytest.mark.random_tests
def test_random_test():
    assert key_strokes([(3, 1), (0, 2), (6, 0), (4, 3), (4, 3), (6, 2), (6, 2), (4, 3), (2, 1), (4, 3), (8, 1), (6, 0), (1, 1), (7, 0), (0, 0), (4, 1), (4, 3), (8, 2), (5, 2), (4, 3), (4, 3), (2, 1), (4, 3), (4, 3), (7, 2), (4, 1), (10, 1), (4, 3), (3, 2), (8, 1), (3, 1), (4, 3), (7, 0), (9, 0), (7, 0), (4, 3), (9, 0), (4, 3), (7, 2), (4, 3), (4, 2), (7, 1), (1, 0), (9, 0), (4, 3), (6, 0), (6, 1), (2, 2), (4, 0), (4, 3), (8, 1), (1, 0), (4, 3), (9, 0), (4, 3), (4, 3), (4, 2), (7, 2), (7, 1), (2, 0), (3, 2), (0, 1), (3, 1), (0, 0), (9, 2), (9, 1), (7, 2), (3, 0), (4, 3), (2, 2), (8, 2), (8, 0), (3, 1), (4, 3), (4, 3), (0, 0), (9, 2), (4, 3), (4, 2), (3, 0), (2, 1), (4, 3), (4, 0), (1, 2), (0, 0), (0, 2), (2, 2), (7, 2), (4, 3), (6, 1), (0, 2), (7, 1), (4, 3), (8, 0), (1, 2), (8, 2), (3, 1), (5, 0), (1, 0), (4, 3), (0, 1), (4, 2), (9, 2), (7, 2), (4, 2), (2, 0), (3, 1), (8, 2), (5, 0), (4, 3), (3, 0), (9, 2), (3, 2), (2, 1), (9, 2), (2, 2), (4, 3), (0, 0), (4, 3), (4, 3), (10, 1), (4, 3), (8, 2), (7, 2), (5, 0), (8, 2), (4, 0), (9, 0), (4, 3), (4, 3), (2, 1), (10, 1), (8, 1), (4, 0), (4, 0), (6, 0), (4, 3), (10, 1), (4, 3), (7, 0), (9, 2), (3, 2), (7, 0), (4, 3), (9, 2), (3, 1), (8, 2), (7, 2), (3, 2), (6, 1), (6, 2), (1, 2), (2, 2), (5, 2), (1, 2), (8, 1), (8, 1), (3, 1), (4, 3), (4, 3), (5, 2), (9, 0), (0, 2), (9, 2), (7, 1), (3, 0), (8, 1), (4, 3), (9, 1), (6, 2), (1, 2), (4, 3), (1, 1), (1, 1), (4, 3), (8, 0), (8, 1), (9, 0), (4, 3), (4, 3), (8, 1), (1, 2), (4, 3), (0, 1), (4, 3), (4, 3), (7, 2), (3, 2), (9, 2), (0, 2), (4, 2), (7, 1), (0, 2), (6, 1), (2, 2), (7, 1), (2, 2), (9, 0), (4, 3), (1, 1), (5, 2), (4, 3), (7, 0), (4, 3), (4, 2), (4, 3), (4, 3), (2, 1), (4, 1), (4, 3), (6, 0), (4, 3), (4, 2), (4, 3), (1, 2), (4, 3), (3, 1), (7, 0), (9, 0), (4, 3), (4, 3), (6, 2), (4, 3), (6, 2), (5, 0), (3, 2), (7, 0), (3, 2), (1, 1), (7, 2), (4, 3), (4, 3), (6, 0), (4, 3), (4, 3), (4, 3), (4, 3), (4, 3), (4, 3), (0, 0), (4, 3), (4, 3), (0, 1), (4, 3), (2, 0), (4, 3), (0, 1), (4, 3), (4, 3), (4, 3), (4, 3), (5, 2), (9, 0), (8, 0), (4, 3), (5, 0), (6, 2), (8, 1), (8, 0), (2, 1), (4, 3), (6, 2), (7, 2), (5, 1), (4, 3), (1, 2), (0, 0), (1, 2), (9, 2), (4, 3), (1, 0), (4, 3), (4, 2), (4, 0), (7, 2), (6, 2), (4, 3), (4, 3), (4, 1), (8, 0), (10, 1), (4, 1), (2, 2), (8, 2), (3, 1), (2, 2), (0, 0), (10, 1), (4, 0), (3, 1), (1, 0)]) == ('''Fzu  mm d lusiqg .N  d  ,g' vlf ipi p , bkwp ujct lw p  b,kevafq?;,R c.Of  q? Brd txqzc, jzk ox.Fyw ab?,Bef.Y r?Vd?C q  ' .,Y.Tp  d'lttu ' I?Vi ?F.,Vjmxcnxllf  npz?Krl ;mx ss olp  lx a  ,v?Zbkzjckcp sn I b  dg u b x fip  m myvivs,  u      q  a e a    npo ymlod m,h xqx? W bt,m  go'gc.Fcq'tfw'''), print('''Should be equal to: Fzu  mm d lusiqg .N  d  ,g' vlf ipi p , bkwp ujct lw p  b,kevafq?;,R c.Of  q? Brd txqzc, jzk ox.Fyw ab?,Bef.Y r?Vd?C q  ' .,Y.Tp  d'lttu ' I?Vi ?F.,Vjmxcnxllf  npz?Krl ;mx ss olp  lx a  ,v?Zbkzjckcp sn I b  dg u b x fip  m myvivs,  u      q  a e a    npo ymlod m,h xqx? W bt,m  go'gc.Fcq'tfw''')

@pytest.mark.random_tests
def test_random_test_2():
    assert key_strokes([(1, 2), (8, 1), (1, 2), (7, 1), (8, 0), (3, 2), (2, 2), (8, 0), (2, 2), (9, 2), (7, 2), (9, 0), (7, 0), (8, 2), (3, 0), (6, 0), (3, 1), (8, 0), (10, 1), (2, 0), (3, 2), (6, 1), (4, 2), (0, 2), (0, 2), (10, 1), (4, 3), (6, 2), (7, 2), (2, 2), (0, 1), (4, 3), (0, 1), (5, 2), (10, 1), (4, 3), (9, 2), (4, 3), (6, 2), (4, 0), (2, 0), (3, 0), (4, 3), (4, 3), (6, 2), (6, 1), (8, 0), (6, 2), (9, 0), (4, 0), (4, 3), (4, 3), (3, 2), (4, 1), (5, 0), (1, 2), (1, 0), (9, 0), (5, 1), (1, 2), (0, 0), (6, 0), (0, 0), (4, 2), (5, 1), (4, 3), (4, 3), (7, 0), (8, 2), (9, 2), (4, 3), (9, 2), (3, 0), (4, 3), (3, 2), (3, 1), (4, 3), (1, 2), (0, 2), (1, 2), (5, 2), (9, 1), (0, 1), (4, 3), (4, 3), (1, 0), (4, 3), (4, 1), (3, 2), (0, 1), (6, 1), (4, 3), (0, 2), (0, 0), (4, 3), (4, 3), (4, 0), (10, 1), (6, 0), (7, 0), (9, 0), (7, 0), (4, 3), (1, 1)]) == ('''Xlxkovcoc?,Pi.Rufo'evjbzz' m,ca an' ? Mter  mjompt  vgyxwphxquqbh  I.? ?R vf xzxn;a  w gvaj zq  t'uipi s'''), print('''Should be equal to: Xlxkovcoc?,Pi.Rufo'evjbzz' m,ca an' ? Mter  mjompt  vgyxwphxquqbh  I.? ?R vf xzxn;a  w gvaj zq  t'uipi s''')

@pytest.mark.random_tests
def test_random_test_3():
    assert key_strokes([(3, 0), (1, 0), (5, 1), (9, 0), (4, 3), (4, 3), (8, 1), (4, 3), (3, 0), (0, 1), (7, 0), (6, 2), (1, 1), (9, 1), (3, 0), (4, 3), (1, 0), (2, 2), (4, 3), (10, 1), (7, 2), (4, 3), (5, 0), (8, 0), (4, 3), (0, 2), (4, 3), (4, 3), (4, 3), (1, 0), (4, 3), (3, 1), (8, 1), (4, 3), (5, 1), (3, 1), (3, 2), (3, 0), (4, 1), (4, 3), (5, 1), (10, 1), (4, 3), (4, 2), (5, 0), (4, 3), (2, 2), (4, 3), (4, 3), (8, 0), (9, 1), (1, 1), (4, 0), (4, 0), (3, 0), (4, 3), (3, 1), (2, 0), (1, 1), (4, 3), (1, 2), (7, 0), (3, 2), (4, 3), (10, 1), (4, 3), (2, 0), (4, 0), (6, 0), (3, 1), (3, 2), (0, 1), (9, 0), (8, 0), (6, 0), (4, 3), (8, 0), (4, 3), (6, 2), (3, 0), (2, 1), (7, 0), (7, 0), (9, 2), (3, 0), (1, 1), (1, 1), (7, 0), (9, 2), (10, 1), (9, 2), (4, 3), (0, 1), (7, 1), (7, 0), (3, 2), (5, 1), (7, 0), (10, 1), (7, 2), (7, 0), (9, 1), (4, 3), (5, 2), (4, 0), (5, 2), (2, 1), (3, 1), (5, 0), (6, 0), (7, 0), (4, 3), (10, 1), (7, 2), (4, 3), (4, 0), (1, 0), (6, 0), (1, 1), (2, 1), (7, 1), (10, 1), (3, 2), (5, 0), (4, 3), (3, 0), (5, 1), (4, 3), (4, 3), (7, 2), (4, 3), (4, 3), (0, 0), (0, 1), (8, 0), (4, 3), (4, 3), (1, 2), (5, 2), (8, 2), (4, 3), (8, 1), (5, 2), (4, 3), (4, 3), (4, 3), (4, 3), (4, 3), (8, 2), (4, 3), (0, 1), (4, 3), (4, 3), (4, 0), (4, 3), (4, 3), (1, 1), (7, 1), (4, 3), (4, 3), (2, 0), (1, 2), (9, 1), (4, 2), (7, 1), (2, 0), (5, 0), (0, 2), (5, 0), (9, 1), (4, 3), (6, 1), (4, 2), (4, 2), (6, 0), (4, 3), (7, 0), (6, 2), (3, 0), (2, 0), (2, 1), (1, 2), (4, 3), (2, 0), (7, 1), (4, 0), (4, 3), (2, 2), (0, 2), (4, 1), (5, 2), (5, 2), (4, 3), (10, 1), (5, 2), (4, 3), (6, 1), (1, 1), (1, 2), (8, 0), (4, 3), (6, 2), (4, 3), (4, 3), (4, 3), (2, 1), (6, 0), (4, 3), (4, 3), (4, 3), (9, 0), (6, 0), (0, 0), (7, 1), (8, 0), (9, 0), (0, 0), (4, 3), (4, 1), (4, 3), (8, 2), (4, 0), (0, 2), (2, 2), (4, 3), (4, 3), (4, 3), (8, 1), (2, 1), (2, 1), (2, 0), (9, 1), (7, 2), (4, 3), (4, 3), (4, 3), (4, 3), (5, 2), (8, 2), (4, 2), (1, 0), (5, 0), (4, 3), (10, 1), (1, 1), (4, 0), (2, 0), (4, 3), (7, 2), (7, 1), (4, 3), (4, 3), (3, 2), (8, 0), (6, 2), (4, 3), (4, 3), (1, 0), (8, 0), (4, 0), (9, 1), (2, 2), (4, 1), (4, 2), (0, 2), (4, 3), (8, 0)]) == ('''Rwhp  l raims;r wc ', yo z   w fl hfvrg h' by c  o;sttr fes xiv ' etufvapou o mrdii?Rssi?'? Akivhi',I; ntndfyui ', twusdk'vy rh  ,  qao  xn. Ln     . A  t  sk  ex;bkeyzy; jbbu imredx ekt czgnn 'n jsxo m   du   puqkopq g .Tzc   ldde;,    n.Bwy 'ste ,k  vom  wot;cgbz o'''), print('''should equal "Rwhp  l raims;r wc ', yo z   w fl hfvrg h' by c  o;sttr fes xiv ' etufvapou o mrdii?Rssi?'? Akivhi',I; ntndfyui ', twusdk'vy rh  ,  qao  xn. Ln     . A  t  sk  ex;bkeyzy; jbbu imredx ekt czgnn 'n jsxo m   du   puqkopq g .Tzc   ldde;,    n.Bwy 'ste ,k  vom  wot;cgbz o"''')